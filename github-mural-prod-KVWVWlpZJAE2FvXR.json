{"createdAt":"2025-08-07T14:10:11.028Z","updatedAt":"2025-10-07T13:22:07.694Z","id":"KVWVWlpZJAE2FvXR","name":"Github-Mural PROD","active":true,"isArchived":false,"nodes":[{"parameters":{"method":"={{ $json.action === 'CREATE' ? 'POST' : 'PATCH' }}","url":"={{ $json.action === 'CREATE' ? \n   'https://app.mural.co/api/public/v1/murals/escengenharia0546.1746550624481/widgets/sticky-note' : \n   'https://app.mural.co/api/public/v1/murals/escengenharia0546.1746550624481/widgets/sticky-note/' + $json.widgetId }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $('GetColumns').item.json.authToken }}"},{"name":"Accept","value":"application/json"},{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json.data }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1664,192],"id":"81c50dff-dfc0-4de3-8422-ba46f5b1fb25","name":"HTTP Request1"},{"parameters":{"jsCode":"\nconst data = $('GetColumns').item.json;\nconst { eventType, itemData, targetColumn, columns, widgets, repository, targetArea } = data;\n\nconsole.log(`📦 Movendo ${eventType} #${itemData.number} para \"${targetColumn}\"`);\nconsole.log(`📁 Repositório: ${repository} (área: ${targetArea.areaName})`);\n\nconst targetCol = columns[targetColumn];\nif (!targetCol) {\n  throw new Error(`❌ Coluna \"${targetColumn}\" não encontrada na área ${targetArea.areaName}`);\n}\n\nconst githubId = eventType === 'issue' ? \n  `[${repository}:GHID:${itemData.number}]` : \n  `[${repository}:GHPR:${itemData.number}]`;\n\nconsole.log(`🔍 Procurando sticky com ID: \"${githubId}\"`);\n\nconst area = data.area;\nlet existingItem = widgets.find(w => {\n  if (w.type !== 'sticky note' || !w.text || !w.text.includes(githubId)) {\n    return false;\n  }\n  \n  return w.x >= area.x && \n         w.x <= area.x + area.width && \n         w.y >= area.y && \n         w.y <= area.y + area.height;\n});\n\nif (!existingItem) {\n  console.log(`⚠️ Não encontrado na área, tentando busca global...`);\n  \n  existingItem = widgets.find(w => \n    w.type === 'sticky note' && \n    w.text && \n    w.text.includes(githubId)\n  );\n  \n  if (existingItem) {\n    console.log(`✅ Sticky encontrado fora da área esperada!`);\n    console.log(`   - Widget ID: ${existingItem.id}`);\n    console.log(`   - Posição: (${existingItem.x}, ${existingItem.y})`);\n    console.log(`   - ParentId: ${existingItem.parentId || 'nenhum'}`);\n    \n    if (existingItem.parentId && existingItem.parentId !== targetArea.areaId) {\n      console.log(`   ⚠️ Sticky está em outra área: ${existingItem.parentId}`);\n    }\n  }\n}\n\nif (!existingItem) {\n  console.log(`❌ ${eventType} #${itemData.number} não encontrado em lugar nenhum - criando novo`);\n  \n  const emoji = eventType === 'issue' ? '📝' : '🔀';\n  const itemType = eventType === 'issue' ? 'Issue' : 'PR';\n  const title = itemData.title.length > 40 ? \n    itemData.title.substring(0, 40) + '...' : \n    itemData.title;\n  \n  let stickyText = `${emoji} ${itemType} #${itemData.number}: ${title}\\n`;\n  stickyText += `📁 ${repository}\\n`;\n  stickyText += `👤 ${itemData.user.login}\\n`;\n  stickyText += `📅 ${new Date(itemData.created_at).toLocaleDateString('pt-BR')}\\n`;\n  \n  if (eventType === 'pr') {\n    stickyText += `🔀 ${itemData.head.ref} → ${itemData.base.ref}\\n`;\n  }\n  \n  if (eventType === 'issue' && itemData.labels && itemData.labels.length > 0) {\n    const labelNames = itemData.labels.slice(0, 2).map(l => l.name).join(', ');\n    stickyText += `🏷️ ${labelNames}\\n`;\n  }\n  \n  stickyText += `\\n${githubId}`;\n  \n  const existingStickies = widgets.filter(w => {\n    if (w.type !== 'sticky note') return false;\n    \n    const inColumn = w.x >= targetCol.contentX && \n                     w.x <= targetCol.contentX + targetCol.contentWidth &&\n                     w.y >= targetCol.contentY;\n    \n    const inArea = w.x >= area.x && \n                   w.x <= area.x + area.width && \n                   w.y >= area.y && \n                   w.y <= area.y + area.height;\n    \n    return inColumn && inArea;\n  });\n  \n  let nextY = targetCol.contentY + 20;\n  if (existingStickies.length > 0) {\n    const lowestY = Math.max(...existingStickies.map(s => s.y + (s.height || 150)));\n    nextY = lowestY + 20;\n  }\n  \n  const centerX = targetCol.contentX + (targetCol.contentWidth / 2) - 125;\n  \n  return {\n    json: {\n      action: 'CREATE',\n      data: {\n        text: stickyText,\n        x: centerX,\n        y: nextY,\n        width: 250,\n        height: 170,\n        shape: \"rectangle\",\n        parentId: targetArea.areaId\n      }\n    }\n  };\n}\n\nconsole.log(`✅ ${eventType} #${itemData.number} encontrado - ID: ${existingItem.id}`);\nconsole.log(`📍 Posição atual: (${existingItem.x}, ${existingItem.y})`);\n\nif (existingItem.parentId !== targetArea.areaId) {\n  console.log(`🔧 Ajustando parentId de ${existingItem.parentId || 'nenhum'} para ${targetArea.areaId}`);\n}\n\nconst existingStickiesInTarget = widgets.filter(w => {\n  if (w.type !== 'sticky note' || w.id === existingItem.id) return false;\n  \n  const inColumn = w.x >= targetCol.contentX && \n                   w.x <= targetCol.contentX + targetCol.contentWidth &&\n                   w.y >= targetCol.contentY;\n  \n  const inArea = w.x >= area.x && \n                 w.x <= area.x + area.width && \n                 w.y >= area.y && \n                 w.y <= area.y + area.height;\n  \n  return inColumn && inArea;\n});\n\nlet newY = targetCol.contentY + 20;\nif (existingStickiesInTarget.length > 0) {\n  const lowestY = Math.max(...existingStickiesInTarget.map(s => s.y + (s.height || 150)));\n  newY = lowestY + 20;\n}\n\nconst newX = targetCol.contentX + (targetCol.contentWidth / 2) - 125;\n\nconsole.log(`📍 Nova posição: (${newX}, ${newY})`);\n\nreturn {\n  json: {\n    action: 'MOVE',\n    widgetId: existingItem.id,\n    data: {\n      x: newX,\n      y: newY,\n      parentId: targetArea.areaId  \n    }\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1104,192],"id":"69db7a98-6117-41c6-9729-1a1ec20f794b","name":"MoveSticky"},{"parameters":{"method":"POST","url":"https://app.mural.co/api/public/v1/murals/escengenharia0546.1746550624481/widgets/sticky-note","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $('GetAuth').item.json.access_token }}"},{"name":"Accept","value":"=application/json"},{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1296,48],"id":"9544ce14-4077-4d09-9d7e-f866ae5ce5e4","name":"CreateStickyHTTP"},{"parameters":{"mode":"runOnceForEachItem","jsCode":"\nconst data = $('GetColumns').item.json;\nconst { eventType, itemData, targetColumn, columns, widgets, repository, targetArea } = data;\n\nconsole.log(`📝 Criando novo post-it: ${eventType} #${itemData.number}`);\nconsole.log(`📁 Repositório: ${repository} (área: ${targetArea.areaName})`);\n\nconst targetCol = columns[targetColumn];\nif (!targetCol) {\n  throw new Error(`❌ Coluna \"${targetColumn}\" não encontrada na área ${targetArea.areaName}`);\n}\n\nconst githubId = eventType === 'issue' ? \n  `[${repository}:GHID:${itemData.number}]` : \n  `[${repository}:GHPR:${itemData.number}]`;\n\nconst existingItem = widgets.find(w => {\n  if (w.type !== 'sticky note' || !w.text || !w.text.includes(githubId)) {\n    return false;\n  }\n  \n  const area = data.area;\n  return w.x >= area.x && \n         w.x <= area.x + area.width && \n         w.y >= area.y && \n         w.y <= area.y + area.height;\n});\n\nif (existingItem) {\n  console.log(`⚠️ ${eventType} #${itemData.number} já existe na área ${targetArea.areaName} - ID: ${existingItem.id}`);\n  throw new Error(`Item já existe: ${existingItem.id}`);\n}\n\nconst emoji = eventType === 'issue' ? '📝' : '🔀';\nconst itemType = eventType === 'issue' ? 'Issue' : 'PR';\nconst title = itemData.title.length > 40 ? \n  itemData.title.substring(0, 40) + '...' : \n  itemData.title;\n\nlet stickyText = `${emoji} ${itemType} #${itemData.number}: ${title}\\n`;\nstickyText += `📁 ${repository}\\n`;\nstickyText += `👤 ${itemData.user.login}\\n`;\nstickyText += `📅 ${new Date(itemData.created_at).toLocaleDateString('pt-BR')}\\n`;\n\nif (eventType === 'pr') {\n  stickyText += `🔀 ${itemData.head.ref} → ${itemData.base.ref}\\n`;\n}\n\nif (eventType === 'issue' && itemData.labels && itemData.labels.length > 0) {\n  const labelNames = itemData.labels.slice(0, 2).map(l => l.name).join(', ');\n  stickyText += `🏷️ ${labelNames}\\n`;\n}\n\nstickyText += `\\n${githubId}`;\n\nconst existingStickies = widgets.filter(w => {\n  if (w.type !== 'sticky note') return false;\n  \n  const inColumn = w.x >= targetCol.contentX && \n                   w.x <= targetCol.contentX + targetCol.contentWidth &&\n                   w.y >= targetCol.contentY;\n  \n  const area = data.area;\n  const inArea = w.x >= area.x && \n                 w.x <= area.x + area.width && \n                 w.y >= area.y && \n                 w.y <= area.y + area.height;\n  \n  return inColumn && inArea;\n});\n\nconsole.log(`📊 Post-its existentes na coluna ${targetColumn} da área ${targetArea.areaName}: ${existingStickies.length}`);\n\nlet nextY = targetCol.contentY + 20;\n\nif (existingStickies.length > 0) {\n  const lowestY = Math.max(...existingStickies.map(s => s.y + (s.height || 150)));\n  nextY = lowestY + 20;\n}\n\nconst centerX = targetCol.contentX + (targetCol.contentWidth / 2) - 125;\n\nconsole.log(`🎯 Coordenadas calculadas para ${targetColumn} em ${targetArea.areaName}:`);\nconsole.log(`   - Shape: (${targetCol.x}, ${targetCol.y}) ${targetCol.width}x${targetCol.height}`);\nconsole.log(`   - Área de conteúdo: (${targetCol.contentX}, ${targetCol.contentY})`);\nconsole.log(`   - Post-it: (${centerX}, ${nextY})`);\n\nreturn {\n  json: {\n    text: stickyText,\n    x: centerX,\n    y: nextY,\n    width: 250,\n    height: 170, \n    shape: \"rectangle\",\n    parentId: targetArea.areaId \n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1104,48],"id":"c6c1a0a4-c19e-4374-bd09-ef44b1b84439","name":"CreateSticky"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.switchOutput }}","rightValue":1,"operator":{"type":"number","operation":"equals"},"id":"07f9b0d1-0092-4f6e-afbd-00c8171a2bb4"}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"5de39caf-f404-432a-9a54-d870abc1042f","leftValue":"={{ $json.switchOutput }}","rightValue":2,"operator":{"type":"number","operation":"equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8a8b9936-cd96-40c0-b78c-7cea3eed5280","leftValue":"={{ $json.switchOutput }}","rightValue":3,"operator":{"type":"number","operation":"equals"}}],"combinator":"and"}}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[896,176],"id":"194579f4-749e-4bb3-a152-7f059c877a10","name":"Switch1"},{"parameters":{"url":"https://app.mural.co/api/public/v1/murals/escengenharia0546.1746550624481/widgets","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $json.access_token }}"},{"name":"Accept","value":"=application/json"},{"name":"Content-Type","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[528,192],"id":"163a783f-de27-44b7-a0aa-2e7651e1e0cc","name":"GetWidgets","alwaysOutputData":true},{"parameters":{"mode":"runOnceForEachItem","jsCode":"\nconst eventData = $('ProcessEvent').item.json;\nif (eventData.skip) {\n  console.log(`⏭️ Pulando GetColumns - evento ignorado: ${eventData.reason}`);\n  return { json: eventData };\n}\n\nconst widgets = $('GetWidgets').item.json.value;\nconst authToken = $('GetAuth').item.json.access_token;\nconst targetArea = eventData.targetArea;\n\nconsole.log(`🔍 Analisando ${widgets.length} widgets do mural`);\nconsole.log(`🎯 Buscando colunas na área: ${targetArea.areaName} (${targetArea.areaId})`);\n\nconst area = widgets.find(w => w.id === targetArea.areaId && w.type === 'area');\nif (!area) {\n  console.log(`❌ Área ${targetArea.areaName} não encontrada!`);\n  \n  const allAreas = widgets.filter(w => w.type === 'area');\n  console.log(`📋 Áreas encontradas no mural: ${allAreas.length}`);\n  allAreas.forEach(a => {\n    console.log(`   - ID: ${a.id}, Título: ${a.title || 'sem título'}`);\n  });\n  \n  return {\n    json: {\n      ...eventData,\n      error: `Área ${targetArea.areaName} não encontrada`,\n      skip: true\n    }\n  };\n}\n\nconsole.log(`✅ Área encontrada: ${area.title || targetArea.areaName}`);\nconsole.log(`📐 Posição da área: (${area.x}, ${area.y}) ${area.width}x${area.height}`);\n\nconst shapesWithParent = widgets.filter(w => {\n  return w.type === 'shape' && \n         w.htmlText && \n         w.parentId === targetArea.areaId;\n});\n\nconsole.log(`🔗 Shapes com parentId da área: ${shapesWithParent.length}`);\n\nconst shapes = widgets.filter(w => {\n  if (w.type !== 'shape' || !w.htmlText) return false;\n  \n  if (w.parentId === targetArea.areaId) {\n    console.log(`   ✓ Shape encontrada por parentId: \"${w.htmlText}\"`);\n    return true;\n  }\n  \n  const shapeLeft = w.x;\n  const shapeRight = w.x + w.width;\n  const shapeTop = w.y;\n  const shapeBottom = w.y + w.height;\n  \n  const areaLeft = area.x;\n  const areaRight = area.x + area.width;\n  const areaTop = area.y;\n  const areaBottom = area.y + area.height;\n  \n  const isInside = shapeLeft >= areaLeft && \n                   shapeRight <= areaRight && \n                   shapeTop >= areaTop && \n                   shapeBottom <= areaBottom;\n  \n  if (isInside) {\n    console.log(`   ✓ Shape encontrada por posição: \"${w.htmlText}\" em (${w.x}, ${w.y})`);\n  }\n  \n  return isInside;\n});\n\nconsole.log(`📋 Total de shapes dentro da área ${targetArea.areaName}: ${shapes.length}`);\n\nif (shapes.length > 0) {\n  console.log(`📝 Shapes encontradas:`);\n  shapes.forEach(s => {\n    const text = s.htmlText.replace(/<[^>]*>/g, ''); \n    console.log(`   - \"${text}\" (ID: ${s.id}, Pos: ${s.x},${s.y})`);\n  });\n} else {\n  console.log(`⚠️ NENHUMA shape encontrada na área!`);\n  \n  const allShapes = widgets.filter(w => w.type === 'shape' && w.htmlText);\n  console.log(`📊 Total de shapes no mural: ${allShapes.length}`);\n  console.log(`📍 Primeiras 5 shapes para debug:`);\n  allShapes.slice(0, 5).forEach(s => {\n    const text = s.htmlText.replace(/<[^>]*>/g, '');\n    console.log(`   - \"${text}\" em (${s.x}, ${s.y}) - ParentId: ${s.parentId || 'nenhum'}`);\n  });\n}\n\nfunction findColumnShape(targetName) {\n  console.log(`\\n🔎 Procurando shape \"${targetName}\" na área ${targetArea.areaName}`);\n  \n  const shape = shapes.find(s => {\n    const htmlLower = s.htmlText.toLowerCase();\n    const targetLower = targetName.toLowerCase();\n    const found = htmlLower.includes(targetLower);\n    \n    if (found) {\n      console.log(`   ✅ Encontrada! HTML: \"${s.htmlText}\"`);\n    }\n    \n    return found;\n  });\n  \n  if (!shape) {\n    console.log(`   ❌ Shape \"${targetName}\" não encontrada na área ${targetArea.areaName}`);\n    \n    const shapeInOtherArea = widgets.find(w => \n      w.type === 'shape' && \n      w.htmlText && \n      w.htmlText.toLowerCase().includes(targetName.toLowerCase())\n    );\n    \n    if (shapeInOtherArea) {\n      console.log(`   ⚠️ Shape \"${targetName}\" existe, mas fora da área!`);\n      console.log(`      Posição: (${shapeInOtherArea.x}, ${shapeInOtherArea.y})`);\n      console.log(`      ParentId: ${shapeInOtherArea.parentId || 'nenhum'}`);\n    }\n    \n    return null;\n  }\n  \n  const column = {\n    name: targetName,\n    shapeId: shape.id,\n    x: shape.x,\n    y: shape.y,\n    width: shape.width,\n    height: shape.height,\n    contentX: shape.x + 50,\n    contentY: shape.y + 100,\n    contentWidth: shape.width - 100,\n    contentHeight: shape.height - 150,\n    parentArea: targetArea\n  };\n  \n  console.log(`   📐 Dimensões: ${column.width}x${column.height} em (${column.x}, ${column.y})`);\n  \n  return column;\n}\n\nconst columns = {\n  'A Fazer': findColumnShape('A Fazer'),\n  'Em Andamento': findColumnShape('Em Andamento'),\n  'Em Revisão': findColumnShape('Em Revisão'),\n  'Concluído': findColumnShape('Concluído')\n};\n\nconst foundColumns = Object.values(columns).filter(c => c !== null).length;\nconsole.log(`\\n📊 RESUMO - Colunas encontradas na área ${targetArea.areaName}: ${foundColumns}/4`);\n\nObject.entries(columns).forEach(([name, column]) => {\n  if (column) {\n    console.log(`✅ ${name}: OK`);\n  } else {\n    console.log(`❌ ${name}: NÃO ENCONTRADA`);\n  }\n});\n\nconst targetColumn = eventData.targetColumn;\nif (targetColumn && !columns[targetColumn]) {\n  console.log(`\\n⚠️ ERRO: Coluna alvo \"${targetColumn}\" não foi encontrada na área ${targetArea.areaName}!`);\n}\n\nreturn {\n  json: {\n    ...eventData,\n    columns: columns,\n    widgets: widgets,\n    authToken: authToken,\n    area: area,\n    debug: {\n      totalWidgets: widgets.length,\n      shapesInArea: shapes.length,\n      shapesWithParentId: shapesWithParent.length,\n      foundColumns: foundColumns,\n      targetColumnExists: targetColumn ? !!columns[targetColumn] : null,\n      areaName: targetArea.areaName,\n      areaId: targetArea.areaId,\n      areaPosition: { x: area.x, y: area.y, width: area.width, height: area.height }\n    }\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[704,192],"id":"f9de101b-5540-4b7d-93c7-238f9280ae82","name":"GetColumns"},{"parameters":{"method":"POST","url":"https://app.mural.co/api/public/v1/authorization/oauth2/token","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/x-www-form-urlencoded"}]},"sendBody":true,"contentType":"form-urlencoded","bodyParameters":{"parameters":[{"name":"client_id","value":"0db8a8b1-65ce-4a1b-aa24-bea700f34160"},{"name":"client_secret","value":"236f0a621e40299f1753d6b67fc7b3e76f436d0352c8177ab4008da81fd0a01ab9b25bb4dcaca7c2b1aa6444ac02fd92426617c5d7b59d8564be3863cc99ed62"},{"name":"refresh_token","value":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRJZCI6IjBkYjhhOGIxLTY1Y2UtNGExYi1hYTI0LWJlYTcwMGYzNDE2MCIsImNvcnNEb21haW5zIjpbIm44bi5lc2MuY29tLmJyIiwib2F1dGgucHN0bW4uaW8iXSwiZCI6ImVzYy5jb20uYnIiLCJtZmFBdXRoZW50aWNhdGVkIjpmYWxzZSwic2NvcGVzIjpbIndvcmtzcGFjZXM6cmVhZCIsIm11cmFsczp3cml0ZSIsIm11cmFsczpyZWFkIl0sInNvdXJjZSI6Im11cmFsbHkiLCJ1c2VybmFtZSI6InU3NGI2NmI4YjNlNjE0YmJhY2U4Nzg5NTIiLCJzZXNzaW9uSWQiOiI4MjAzNDNlNS02YzhjLTQyZmUtYTJjNi01NzkzMWJiMzczMmEiLCJpYXQiOjE3NTM5MDgzNzIsImV4cCI6MTc4NTQ2NTk3Mn0.DXiT_K5AQNzx0YS5CDjmTFGeBolS1WYXMz0g85vWHWk"},{"name":"grant_type","value":"refresh_token"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[368,192],"id":"4856e41a-e92b-4d2c-8524-29f8af4de51d","name":"GetAuth","alwaysOutputData":false},{"parameters":{"jsCode":"\nconst data = $input.item.json;\nconst event = data.headers?.['x-github-event'];\nconst action = data.body?.action;\nconst repository = data.body?.repository?.name;\n\nconsole.log(`📥 Evento recebido: ${event}.${action} no repositório ${repository}`);\n\n\nconst REPO_TO_AREA_MAP = {\n  'ESC-APP': {\n    areaId: '0-1746550663084', \n    areaName: 'ESC-APP' \n  },\n};\n\nconst repoConfig = REPO_TO_AREA_MAP[repository];\nif (!repoConfig) {\n  console.log(`⚠️ Repositório \"${repository}\" não está configurado no mapeamento`);\n  return { \n    json: { \n      skip: true, \n      reason: `Repositório ${repository} não configurado`,\n      switchOutput: 0,\n      eventKey: `${event}.${action}`\n    } \n  };\n}\n\nconsole.log(`🎯 Repositório \"${repository}\" mapeado para área \"${repoConfig.areaName}\"`);\n\nconst eventMap = {\n  'issues.opened': { \n    type: 'issue', \n    action: 'create', \n    targetColumn: 'A Fazer',\n    switchOutput: 1,\n    data: data.body.issue \n  },\n  'issues.closed': { \n    type: 'issue', \n    action: 'move', \n    targetColumn: 'Concluído',\n    switchOutput: 2,\n    data: data.body.issue \n  },\n  'issues.reopened': { \n    type: 'issue', \n    action: 'move', \n    targetColumn: 'A Fazer',\n    switchOutput: 2,\n    data: data.body.issue \n  },\n  'pull_request.opened': { \n    type: 'pr', \n    action: 'create', \n    targetColumn: 'Em Revisão',\n    switchOutput: 1,\n    data: data.body.pull_request \n  },\n  'pull_request.closed': {\n    type: 'pr',\n    action: data.body.pull_request?.merged ? 'complete' : 'skip',\n    targetColumn: data.body.pull_request?.merged ? 'Concluído' : null,\n    switchOutput: data.body.pull_request?.merged ? 3 : 0,\n    data: data.body.pull_request\n  }\n};\n\nconst eventKey = `${event}.${action}`;\nconst eventConfig = eventMap[eventKey];\n\nif (!eventConfig || eventConfig.action === 'skip') {\n  console.log(`⏭️ Evento ${eventKey} ignorado`);\n  return { \n    json: { \n      skip: true, \n      reason: `Evento ${eventKey} não é relevante para tracking`,\n      switchOutput: 0,\n      eventKey: eventKey\n    } \n  };\n}\n\nconsole.log(`✅ Processando: ${eventConfig.type} → ${eventConfig.action} → ${eventConfig.targetColumn}`);\nconsole.log(`🎯 Área alvo: ${repoConfig.areaName} (${repoConfig.areaId})`);\nconsole.log(`🔀 Saída do Switch: ${eventConfig.switchOutput}`);\n\nif (eventConfig.data) {\n  console.log(`📊 Item #${eventConfig.data.number}: ${eventConfig.data.title}`);\n  console.log(`👤 Autor: ${eventConfig.data.user?.login}`);\n}\n\nreturn {\n  json: {\n    eventType: eventConfig.type,\n    action: eventConfig.action,\n    targetColumn: eventConfig.targetColumn,\n    switchOutput: eventConfig.switchOutput,\n    itemData: eventConfig.data,\n    repository: repository,\n    targetArea: repoConfig, \n    timestamp: new Date().toISOString(),\n    originalEvent: { \n      event: event, \n      action: action,\n      eventKey: eventKey\n    },\n    skip: false\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[208,192],"id":"d1dad67d-6c4e-4e48-8c42-1e838083da9d","name":"ProcessEvent"},{"parameters":{"jsCode":"\nconst data = $('GetColumns').item.json;\nconst { itemData, columns, widgets, repository, targetArea } = data;\n\nconst targetCol = columns['Concluído'];\nif (!targetCol) {\n  throw new Error(`❌ Coluna \"Concluído\" não encontrada na área ${targetArea.areaName}`);\n}\n\nconsole.log(`🎉 PR #${itemData.number} merged no repositório ${repository}`);\nconsole.log(`📁 Área: ${targetArea.areaName}`);\n\nconst prId = `[${repository}:GHPR:${itemData.number}]`;\nconst area = data.area;\n\nconst prWidget = widgets.find(w => {\n  if (w.type !== 'sticky note' || !w.text || !w.text.includes(prId)) {\n    return false;\n  }\n  \n  return w.x >= area.x && \n         w.x <= area.x + area.width && \n         w.y >= area.y && \n         w.y <= area.y + area.height;\n});\n\nconst prBody = itemData.body || '';\nconst issueNumbers = [];\nconst patterns = [\n  /(?:closes|fixes|resolves)\\s+#(\\d+)/gi,\n  /(?:close|fix|resolve)\\s+#(\\d+)/gi\n];\n\npatterns.forEach(pattern => {\n  let match;\n  while ((match = pattern.exec(prBody)) !== null) {\n    const issueNum = parseInt(match[1], 10);\n    if (!issueNumbers.includes(issueNum)) {\n      issueNumbers.push(issueNum);\n    }\n  }\n});\n\nconst issueWidgets = [];\nissueNumbers.forEach(issueNum => {\n  const issueId = `[${repository}:GHID:${issueNum}]`;\n  const issueWidget = widgets.find(w => {\n    if (w.type !== 'sticky note' || !w.text || !w.text.includes(issueId)) {\n      return false;\n    }\n    \n    return w.x >= area.x && \n           w.x <= area.x + area.width && \n           w.y >= area.y && \n           w.y <= area.y + area.height;\n  });\n  \n  if (issueWidget) {\n    issueWidgets.push({ number: issueNum, widget: issueWidget });\n  }\n});\n\nconsole.log(`🔍 Issues mencionadas: ${issueNumbers.join(', ')}`);\nconsole.log(`📦 Issues encontradas na área ${targetArea.areaName}: ${issueWidgets.length}`);\n\nconst existingStickies = widgets.filter(w => {\n  if (w.type !== 'sticky note') return false;\n  \n  const inColumn = w.x >= targetCol.contentX && \n                   w.x <= targetCol.contentX + targetCol.contentWidth &&\n                   w.y >= targetCol.contentY;\n  \n  const inArea = w.x >= area.x && \n                 w.x <= area.x + area.width && \n                 w.y >= area.y && \n                 w.y <= area.y + area.height;\n  \n  return inColumn && inArea;\n});\n\nlet nextY = targetCol.contentY + 20;\nif (existingStickies.length > 0) {\n  const lowestY = Math.max(...existingStickies.map(s => s.y + (s.height || 170)));\n  nextY = lowestY + 20;\n}\n\nconst centerX = targetCol.contentX + (targetCol.contentWidth / 2) - 125;\n\nconst moveActions = [];\n\nif (prWidget) {\n  moveActions.push({\n    type: 'pr',\n    widgetId: prWidget.id,\n    number: itemData.number,\n    x: centerX,\n    y: nextY,\n    repository: repository\n  });\n  nextY += 190; \n}\n\nissueWidgets.forEach((issue) => {\n  moveActions.push({\n    type: 'issue',\n    number: issue.number,\n    widgetId: issue.widget.id,\n    x: centerX,\n    y: nextY,\n    repository: repository\n  });\n  nextY += 190; \n});\n\nconsole.log(`📋 Preparando ${moveActions.length} movimentações para \"Concluído\" na área ${targetArea.areaName}`);\n\nmoveActions.forEach((action, index) => {\n  console.log(`   ${index + 1}. ${action.type} #${action.number} → (${action.x}, ${action.y})`);\n});\n\nreturn {\n  json: {\n    moveActions: moveActions,\n    prNumber: itemData.number,\n    linkedIssues: issueNumbers,\n    targetColumn: 'Concluído',\n    repository: repository,\n    targetArea: targetArea\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1104,400],"id":"9db403b6-57dc-4fec-8669-bc126c83ff47","name":"CompletePR"},{"parameters":{"url":"https://app.mural.co/api/public/v1/murals/escengenharia0546.1746550624481/widgets","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $('GetColumns').item.json.authToken }}"},{"name":"Accept","value":"=application/json"},{"name":"Content-Type","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1296,192],"id":"40d621f1-00e3-4a8a-bc5a-9956eea43a9f","name":"GetFreshWidgets","alwaysOutputData":true},{"parameters":{"mode":"runOnceForEachItem","jsCode":"\nconst freshWidgets = $('GetFreshWidgets').item.json.value;\nconst data = $('GetColumns').item.json;\nconst { eventType, itemData, targetColumn, columns, repository, targetArea } = data;\n\nconsole.log(`\\n🔄 === INICIANDO RefreshAndMove ===`);\nconsole.log(`📋 Evento: ${eventType} #${itemData.number}`);\nconsole.log(`📁 Repositório: ${repository}`);\nconsole.log(`🎯 Área alvo: ${targetArea.areaName} (${targetArea.areaId})`);\nconsole.log(`➡️ Movendo para coluna: ${targetColumn}`);\nconsole.log(`📊 Total de widgets recebidos: ${freshWidgets.length}`);\n\nconst githubId = eventType === 'issue' ? \n  `[${repository}:GHID:${itemData.number}]` : \n  `[${repository}:GHPR:${itemData.number}]`;\n\nconsole.log(`\\n🔍 Procurando sticky note com ID: \"${githubId}\"`);\n\nconst freshArea = freshWidgets.find(w => w.id === targetArea.areaId && w.type === 'area');\nif (!freshArea) {\n  console.log(`❌ Área ${targetArea.areaName} não encontrada nos widgets atualizados`);\n  \n  const areas = freshWidgets.filter(w => w.type === 'area');\n  console.log(`📋 Áreas encontradas: ${areas.length}`);\n  areas.forEach(a => {\n    console.log(`   - ID: ${a.id}, Título: ${a.title || 'sem título'}`);\n  });\n  \n  throw new Error(`Área ${targetArea.areaName} não encontrada`);\n}\n\nconsole.log(`✅ Área encontrada: ${freshArea.title || targetArea.areaName}`);\nconsole.log(`📐 Limites da área: X[${freshArea.x} - ${freshArea.x + freshArea.width}], Y[${freshArea.y} - ${freshArea.y + freshArea.height}]`);\n\nconst allStickies = freshWidgets.filter(w => w.type === 'sticky note');\nconsole.log(`\\n📌 Total de sticky notes no mural: ${allStickies.length}`);\n\nconsole.log(`\\n🔎 Buscando sticky com texto contendo: \"${githubId}\"`);\nconst stickyWithId = allStickies.find(w => w.text && w.text.includes(githubId));\nif (stickyWithId) {\n  console.log(`✅ Sticky encontrado no mural!`);\n  console.log(`   - ID do widget: ${stickyWithId.id}`);\n  console.log(`   - Posição: (${stickyWithId.x}, ${stickyWithId.y})`);\n  console.log(`   - Texto: \"${stickyWithId.text.substring(0, 100)}...\"`);\n  \n  const inArea = stickyWithId.x >= freshArea.x && \n                 stickyWithId.x <= freshArea.x + freshArea.width && \n                 stickyWithId.y >= freshArea.y && \n                 stickyWithId.y <= freshArea.y + freshArea.height;\n  \n  console.log(`   - Está dentro da área ${targetArea.areaName}? ${inArea ? 'SIM' : 'NÃO'}`);\n  \n  if (!inArea) {\n    console.log(`   ⚠️ O sticky existe mas está FORA da área esperada!`);\n  }\n} else {\n  console.log(`❌ Sticky com \"${githubId}\" NÃO encontrado no mural!`);\n  \n  console.log(`\\n📝 Primeiros 5 sticky notes para debug:`);\n  allStickies.slice(0, 5).forEach((s, i) => {\n    const preview = s.text ? s.text.substring(0, 80).replace(/\\n/g, ' ') : 'sem texto';\n    console.log(`   ${i+1}. \"${preview}...\"`);\n  });\n  \n  console.log(`\\n🔍 Procurando por variações do ID...`);\n  const variations = [\n    `GHID:${itemData.number}`,\n    `[GHID:${itemData.number}]`,\n    `${repository}:GHID:${itemData.number}`,\n    itemData.number.toString()\n  ];\n  \n  variations.forEach(variant => {\n    const found = allStickies.find(w => w.text && w.text.includes(variant));\n    if (found) {\n      console.log(`   ✓ Encontrado com variação \"${variant}\"`);\n      console.log(`     Texto: \"${found.text.substring(0, 100)}...\"`);\n    }\n  });\n}\n\nconst existingItem = freshWidgets.find(w => \n    w.type === 'sticky note' &&\n    w.text &&\n    w.text.includes(githubId) &&\n    w.parentId === targetArea.areaId\n);\n\nif (!existingItem) {\n  console.log(`\\n❌ ERRO: ${eventType} #${itemData.number} não encontrado na área ${targetArea.areaName}`);\n  \n  const areaStickies = freshWidgets.filter(w => {\n    if (w.type !== 'sticky note') return false;\n    return w.x >= freshArea.x && \n           w.x <= freshArea.x + freshArea.width && \n           w.y >= freshArea.y && \n           w.y <= freshArea.y + freshArea.height;\n  });\n  \n  console.log(`📋 Sticky notes dentro da área ${targetArea.areaName}: ${areaStickies.length}`);\n  areaStickies.slice(0, 3).forEach((note, i) => {\n    const preview = note.text ? note.text.substring(0, 60).replace(/\\n/g, ' ') : 'sem texto';\n    console.log(`   ${i+1}. \"${preview}...\"`);\n  });\n  \n  throw new Error(`Widget não encontrado na área ${targetArea.areaName}: ${githubId}`);\n}\n\nconsole.log(`\\n✅ ${eventType} #${itemData.number} encontrado na área ${targetArea.areaName}`);\nconsole.log(`📍 Widget ID: ${existingItem.id}`);\nconsole.log(`📍 Posição atual: (${existingItem.x}, ${existingItem.y})`);\n\nconst targetCol = columns[targetColumn];\n\nif (!targetCol) {\n  throw new Error(`❌ Coluna \"${targetColumn}\" não encontrada na área ${targetArea.areaName}`);\n}\n\nconsole.log(`\\n🎯 Movendo para coluna: ${targetColumn}`);\nconsole.log(`📐 Área da coluna: (${targetCol.contentX}, ${targetCol.contentY}) ${targetCol.contentWidth}x${targetCol.contentHeight}`);\n\nconst existingStickiesInTarget = freshWidgets.filter(w => {\n  if (w.type !== 'sticky note' || w.id === existingItem.id) return false;\n  \n  const inColumn = w.x >= targetCol.contentX && \n                   w.x <= targetCol.contentX + targetCol.contentWidth &&\n                   w.y >= targetCol.contentY;\n  \n  const inArea = w.x >= freshArea.x && \n                 w.x <= freshArea.x + freshArea.width && \n                 w.y >= freshArea.y && \n                 w.y <= freshArea.y + freshArea.height;\n  \n  return inColumn && inArea;\n});\n\nconsole.log(`📊 Sticky notes já na coluna alvo: ${existingStickiesInTarget.length}`);\n\nlet newY = targetCol.contentY + 20;\nif (existingStickiesInTarget.length > 0) {\n  const lowestY = Math.max(...existingStickiesInTarget.map(s => s.y + (s.height || 170)));\n  newY = lowestY + 20;\n}\n\nconst newX = targetCol.contentX + (targetCol.contentWidth / 2) - 125;\n\nconsole.log(`📍 Nova posição calculada: (${newX}, ${newY})`);\nconsole.log(`\\n✅ === RefreshAndMove CONCLUÍDO COM SUCESSO ===\\n`);\n\nreturn {\n  json: {\n    widgetId: existingItem.id,\n    data: {\n      x: newX,\n      y: newY\n    },\n    debug: {\n      foundInFreshWidgets: true,\n      targetColumn: targetColumn,\n      targetArea: targetArea.areaName,\n      repository: repository,\n      freshWidgetsCount: freshWidgets.length,\n      existingStickiesInTarget: existingStickiesInTarget.length,\n      oldPosition: { x: existingItem.x, y: existingItem.y },\n      newPosition: { x: newX, y: newY },\n      githubId: githubId\n    }\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1488,192],"id":"f23689a4-f9c8-4c37-8271-eae5c664ab38","name":"RefreshAndMove"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1296,400],"id":"89577ec5-36ee-4508-a10e-afeef076f5e8","name":"Loop Over Items"},{"parameters":{"url":"https://app.mural.co/api/public/v1/murals/escengenharia0546.1746550624481/widgets","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $('GetColumns').item.json.authToken }}"},{"name":"Accept","value":"=application/json"},{"name":"Content-Type","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1504,416],"id":"6ff806cf-2bcb-4e99-ac3f-42763f41a08e","name":"GetFreshWidgets2","alwaysOutputData":true},{"parameters":{"mode":"runOnceForEachItem","jsCode":"\nconst moveData = $input.item.json;\nconst freshWidgets = $('GetFreshWidgets2').item.json.value;\n\nconst contextData = $('CompletePR').item.json;\nconst { repository, targetArea } = contextData;\n\nconsole.log(`🔄 Movendo widget ${moveData.widgetId} para (${moveData.x}, ${moveData.y})`);\nconsole.log(`📁 Repositório: ${repository} (área: ${targetArea.areaName})`);\n\nconst targetWidget = freshWidgets.find(w => w.id === moveData.widgetId);\n\nif (!targetWidget) {\n  console.log(`❌ Widget ${moveData.widgetId} não encontrado`);\n  throw new Error(`Widget ${moveData.widgetId} não encontrado`);\n}\n\nconst freshArea = freshWidgets.find(w => w.id === targetArea.areaId && w.type === 'area');\nif (!freshArea) {\n  console.log(`❌ Área ${targetArea.areaName} não encontrada nos widgets atualizados`);\n  throw new Error(`Área ${targetArea.areaName} não encontrada`);\n}\n\nconst widgetInArea = targetWidget.x >= freshArea.x && \n                     targetWidget.x <= freshArea.x + freshArea.width && \n                     targetWidget.y >= freshArea.y && \n                     targetWidget.y <= freshArea.y + freshArea.height;\n\nif (!widgetInArea) {\n  console.log(`⚠️ Widget ${moveData.widgetId} não está na área ${targetArea.areaName}`);\n  throw new Error(`Widget não está na área correta`);\n}\n\nconsole.log(`✅ Widget encontrado na área ${targetArea.areaName}: ${targetWidget.id}`);\nconsole.log(`📍 Movendo de (${targetWidget.x}, ${targetWidget.y}) para (${moveData.x}, ${moveData.y})`);\n\nreturn {\n  json: {\n    widgetId: moveData.widgetId,\n    data: {\n      x: moveData.x,\n      y: moveData.y\n    },\n    debug: {\n      repository: repository,\n      targetArea: targetArea.areaName,\n      oldPosition: { x: targetWidget.x, y: targetWidget.y },\n      newPosition: { x: moveData.x, y: moveData.y }\n    }\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1664,416],"id":"65935310-6dff-4dc2-8e1e-14903b8d3478","name":"RefreshAndMove2"},{"parameters":{"method":"PATCH","url":"=https://app.mural.co/api/public/v1/murals/escengenharia0546.1746550624481/widgets/sticky-note/{{ $json.widgetId }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $('GetColumns').item.json.authToken }}"},{"name":"Accept","value":"application/json"},{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json.data }}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1808,416],"id":"b62e077e-95ff-4b7f-9965-c95e4c8e42c2","name":"HTTP Request2"},{"parameters":{"rule":{"interval":[{"field":"hours"}]}},"id":"b85584d9-1212-4d65-86b6-569a48331336","name":"Schedule Trigger","type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.1,"position":[32,992]},{"parameters":{"jsCode":"const GITHUB_OWNER = 'ESC-Engenharia';\n\n// O `allWidgets` agora vem do nó que já filtrou pela área correta.\nconst allWidgets = $input.item.json.value;\nconst issuesToClose = [];\n\nconsole.log(`Iniciando varredura em ${allWidgets.length} widgets da área monitorada.`);\n\n// Encontra a shape (coluna) chamada \"Concluído\" dentro dos widgets recebidos\nconst columnConcluido = allWidgets.find(w =>\n  w.type === 'shape' &&\n  w.htmlText &&\n  w.htmlText.toLowerCase().includes('concluído')\n);\n\nif (!columnConcluido) {\n  console.log(`Coluna \"Concluído\" não encontrada na área monitorada.`);\n  return []; // Encerra a execução se não encontrar a coluna\n}\n\nconsole.log(`Coluna \"Concluído\" encontrada. ID: ${columnConcluido.id}`);\n\nconst columnLeft = columnConcluido.x;\nconst columnRight = columnConcluido.x + columnConcluido.width;\nconst columnTop = columnConcluido.y;\nconst columnBottom = columnConcluido.y + columnConcluido.height;\n\n// Filtra apenas os sticky notes que estão DENTRO das coordenadas da coluna \"Concluído\"\nconst stickiesInColumn = allWidgets.filter(sticky =>\n  sticky.type === 'sticky note' &&\n  sticky.text &&\n  sticky.x >= columnLeft &&\n  sticky.x <= columnRight &&\n  sticky.y >= columnTop &&\n  sticky.y <= columnBottom\n);\n\nconsole.log(`Encontrados ${stickiesInColumn.length} sticky notes na coluna \"Concluído\".`);\n\n// Expressão Regular CORRIGIDA para extrair dados da URL do GitHub\nconst githubUrlRegex = /github\\.com\\/([^/]+)\\/([^/]+)\\/issues\\/(\\d+)/;\n\nfor (const sticky of stickiesInColumn) {\n  if (!sticky.text) continue;\n\n  // Tenta extrair os dados da URL\n  const match = sticky.text.match(githubUrlRegex);\n\n  if (match) {\n    // match[1] é o dono, match[2] é o repo, match[3] é o número da issue\n    const repoName = match[2];\n    const issueNumber = match[3];\n    \n    console.log(`Issue encontrada para fechar: Repo=${repoName}, Issue #${issueNumber}`);\n    \n    issuesToClose.push({\n      json: {\n        owner: GITHUB_OWNER,\n        repo: repoName,\n        issue_number: parseInt(issueNumber, 10)\n      }\n    });\n  } else {\n    console.log(`Sticky note ${sticky.id} está em \"Concluído\", mas não foi possível extrair a URL da issue.`);\n  }\n}\n\nif (issuesToClose.length === 0) {\n  console.log(\"Nenhuma issue válida para fechar foi encontrada na coluna 'Concluído'.\");\n}\n\nreturn issuesToClose;"},"id":"51f9c4f2-6dc4-4fba-be8d-578d6ed49d4d","name":"ProcessMuralData","type":"n8n-nodes-base.code","typeVersion":2,"position":[656,992]},{"parameters":{"conditions":{"string":[{"value1":"={{ $json.state }}","value2":"open"}]}},"id":"fe1d6ad3-380a-4dcc-9ce2-d4efed101a1e","name":"Is Issue Open?","type":"n8n-nodes-base.if","typeVersion":1,"position":[1056,992]},{"parameters":{"method":"POST","url":"https://app.mural.co/api/public/v1/authorization/oauth2/token","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/x-www-form-urlencoded"}]},"sendBody":true,"contentType":"form-urlencoded","bodyParameters":{"parameters":[{"name":"client_id","value":"0db8a8b1-65ce-4a1b-aa24-bea700f34160"},{"name":"client_secret","value":"236f0a621e40299f1753d6b67fc7b3e76f436d0352c8177ab4008da81fd0a01ab9b25bb4dcaca7c2b1aa6444ac02fd92426617c5d7b59d8564be3863cc99ed62"},{"name":"refresh_token","value":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRJZCI6IjBkYjhhOGIxLTY1Y2UtNGExYi1hYTI0LWJlYTcwMGYzNDE2MCIsImNvcnNEb21haW5zIjpbIm44bi5lc2MuY29tLmJyIiwib2F1dGgucHN0bW4uaW8iXSwiZCI6ImVzYy5jb20uYnIiLCJtZmFBdXRoZW50aWNhdGVkIjpmYWxzZSwic2NvcGVzIjpbIndvcmtzcGFjZXM6cmVhZCIsIm11cmFsczp3cml0ZSIsIm11cmFsczpyZWFkIl0sInNvdXJjZSI6Im11cmFsbHkiLCJ1c2VybmFtZSI6InU3NGI2NmI4YjNlNjE0YmJhY2U4Nzg5NTIiLCJzZXNzaW9uSWQiOiI4MjAzNDNlNS02YzhjLTQyZmUtYTJjNi01NzkzMWJiMzczMmEiLCJpYXQiOjE3NTM5MDgzNzIsImV4cCI6MTc4NTQ2NTk3Mn0.DXiT_K5AQNzx0YS5CDjmTFGeBolS1WYXMz0g85vWHWk"},{"name":"grant_type","value":"refresh_token"}]},"options":{}},"id":"a3f4f7fc-4ddb-4448-af85-6bc17676d86f","name":"GetAuth1","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[256,992]},{"parameters":{"operation":"get","owner":{"__rl":true,"value":"ESC-Engenharia","mode":"list","cachedResultName":"ESC-Engenharia","cachedResultUrl":"https://github.com/ESC-Engenharia"},"repository":{"__rl":true,"value":"={{ $json.repo }}","mode":"name"},"issueNumber":"={{ $json.issue_number }}"},"type":"n8n-nodes-base.github","typeVersion":1.1,"position":[848,992],"id":"0a766427-02b8-4f99-b98b-b6a2fbcd5abd","name":"Get an issue","webhookId":"98e46f65-8435-4e2a-a69f-985b96327687","credentials":{"githubApi":{"id":"nOcBgnUFCiOOMhea","name":"Inovesc"}}},{"parameters":{"operation":"edit","owner":{"__rl":true,"value":"ESC-Engenharia","mode":"list","cachedResultName":"ESC-Engenharia","cachedResultUrl":"https://github.com/ESC-Engenharia"},"repository":{"__rl":true,"value":"={{ $json.repository_url.replace('api.github.com/repos', 'github.com') }}","mode":"url"},"issueNumber":"={{ $json.number }}","editFields":{"state":"closed"}},"type":"n8n-nodes-base.github","typeVersion":1.1,"position":[1344,976],"id":"0b097f4d-981c-4ab5-9595-32cd65c3bf5b","name":"Edit an issue","webhookId":"8ffd86cb-0b5f-41ac-a0b2-759ff084b50e","credentials":{"githubApi":{"id":"nOcBgnUFCiOOMhea","name":"Inovesc"}}},{"parameters":{"owner":{"__rl":true,"value":"PedroGAC","mode":"list","cachedResultName":"PedroGAC","cachedResultUrl":"https://github.com/PedroGAC"},"repository":{"__rl":true,"value":"mural","mode":"list","cachedResultName":"mural","cachedResultUrl":"https://github.com/PedroGAC/mural"},"events":["issues","pull_request"],"options":{}},"type":"n8n-nodes-base.githubTrigger","typeVersion":1,"position":[48,192],"id":"88d46f7e-87d4-438c-bba3-8bd7e6d849c2","name":"Github Trigger","webhookId":"ae65acbc-7f03-426d-865b-a1a690f3b915","credentials":{"githubApi":{"id":"nOcBgnUFCiOOMhea","name":"Inovesc"}},"disabled":true},{"parameters":{"content":"## Fluxo principal","height":656,"width":2000},"type":"n8n-nodes-base.stickyNote","position":[-16,-32],"typeVersion":1,"id":"60dc85fa-61e8-4623-8c38-cf7bb1901b9d","name":"Sticky Note"},{"parameters":{"content":"## Monitoramento do Kanban","height":256,"width":1552},"type":"n8n-nodes-base.stickyNote","position":[-16,912],"typeVersion":1,"id":"0e1711cc-8edc-4105-b538-e8e25f0e9ff3","name":"Sticky Note1"},{"parameters":{"content":"# Como Adicionar um Novo Repositório\n\nPara monitorar um novo repositório, siga estes dois passos no workflow:\n\n## 1. Adicione um novo Github Trigger\n- Copie o gatilho existente.\n- Configure-o para o novo repositório que deseja monitorar.\n- Conecte a saída do novo gatilho ao nó **ProcessEvent**.\n\n## 2. Atualize o Mapeamento no Código\n- Edite o nó **ProcessEvent**.\n- Adicione uma nova linha no objeto `REPO_TO_AREA_MAP`, associando o nome do novo repositório ao `areaId` correspondente no Mural.\n- **Importante:** Faça a mesma alteração no nó **ProcessMuralData** do fluxo de monitoramento.\n","height":416,"width":752},"type":"n8n-nodes-base.stickyNote","position":[624,-528],"typeVersion":1,"id":"5c31e17d-b874-46b4-8f1c-a84172d94c45","name":"Sticky Note3"},{"parameters":{"rule":{"interval":[{"field":"hours"}]}},"id":"793b69a6-ee9e-4f3a-bebd-c6ee06dcecca","name":"Schedule Trigger - Sticky Monitor","type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.1,"position":[16,1216]},{"parameters":{"method":"POST","url":"https://app.mural.co/api/public/v1/authorization/oauth2/token","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/x-www-form-urlencoded"}]},"sendBody":true,"contentType":"form-urlencoded","bodyParameters":{"parameters":[{"name":"client_id","value":"0db8a8b1-65ce-4a1b-aa24-bea700f34160"},{"name":"client_secret","value":"236f0a621e40299f1753d6b67fc7b3e76f436d0352c8177ab4008da81fd0a01ab9b25bb4dcaca7c2b1aa6444ac02fd92426617c5d7b59d8564be3863cc99ed62"},{"name":"refresh_token","value":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRJZCI6IjBkYjhhOGIxLTY1Y2UtNGExYi1hYTI0LWJlYTcwMGYzNDE2MCIsImNvcnNEb21haW5zIjpbIm44bi5lc2MuY29tLmJyIiwib2F1dGgucHN0bW4uaW8iXSwiZCI6ImVzYy5jb20uYnIiLCJtZmFBdXRoZW50aWNhdGVkIjpmYWxzZSwic2NvcGVzIjpbIndvcmtzcGFjZXM6cmVhZCIsIm11cmFsczp3cml0ZSIsIm11cmFsczpyZWFkIl0sInNvdXJjZSI6Im11cmFsbHkiLCJ1c2VybmFtZSI6InU3NGI2NmI4YjNlNjE0YmJhY2U4Nzg5NTIiLCJzZXNzaW9uSWQiOiI4MjAzNDNlNS02YzhjLTQyZmUtYTJjNi01NzkzMWJiMzczMmEiLCJpYXQiOjE3NTM5MDgzNzIsImV4cCI6MTc4NTQ2NTk3Mn0.DXiT_K5AQNzx0YS5CDjmTFGeBolS1WYXMz0g85vWHWk"},{"name":"grant_type","value":"refresh_token"}]},"options":{}},"id":"f360132a-3284-48bb-9ba4-c4f555c53899","name":"GetAuth - Sticky","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[208,1216]},{"parameters":{"jsCode":"const allWidgets = $input.item.json.value;\nconst GITHUB_OWNER = 'ESC-Engenharia';\n\nconst AREA_TO_REPO_MAP = {\n  '0-1754932920649': 'ESC-APP',\n  '0-1754932890194': 'GeraRAT'\n};\n\nconst TAG_ID_TO_LABEL_MAP = {\n  // --- Prioridade ---\n  'tag-1649688324366': 'high',\n  'tag-1649688370248': 'medium',\n  'tag-1649688399209': 'low',\n\n  // --- Tipo de Issue ---\n  'tag-1754934766129': 'issue',\n  'tag-1755105051497': 'bug',\n  'tag-1755001299058': 'todo',\n\n  // --- Equipes / Áreas ---\n  'tag-1752867016602': 'Backend',\n  'tag-1752866901960': 'Frontend',\n  'tag-1754501954739': 'DevOps',\n  'tag-1752871832421': 'Design',\n  'tag-1752872300556': 'ELM'\n};\n\nconsole.log(`📋 Analisando ${allWidgets.length} widgets do mural`);\nconsole.log(`🏷️ Mapeamento correto de tags:`, TAG_ID_TO_LABEL_MAP);\n\nconst taggedStickyNotes = allWidgets.filter(w => {\n  if (w.type !== 'sticky note') return false;\n  if (!w.tags || !Array.isArray(w.tags)) return false;\n  if (!w.text && !w.htmlText) return false;\n  \n  // Verificar se tem a tag \"issue\" (pelo ID correto)\n  const hasIssueTag = w.tags.includes('tag-1754934766129');\n  \n  if (!hasIssueTag) return false;\n  \n  const text = w.htmlText || w.text || '';\n  const alreadyProcessed = text.includes('[GITHUB:CREATED]') || \n                           text.includes('[GITHUB:ERROR]');\n  \n  return !alreadyProcessed;\n});\n\nconsole.log(`🏷️ Sticky notes com tag \"issue\" encontrados: ${taggedStickyNotes.length}`);\n\nconst issuesToCreate = [];\n\nfor (const sticky of taggedStickyNotes) {\n  console.log(`\\n🔍 Processando sticky note: ${sticky.id}`);\n  console.log(`📍 Posição: (${sticky.x}, ${sticky.y})`);\n  console.log(`🏷️ Tag IDs: [${sticky.tags.join(', ')}]`);\n  \n  // Extrair labels das tags usando o mapeamento correto\n  const githubLabels = [];\n  \n  sticky.tags.forEach(tagId => {\n    console.log(`\\n🔍 Processando tag ID: \"${tagId}\"`);\n    \n    if (TAG_ID_TO_LABEL_MAP[tagId]) {\n      const labelName = TAG_ID_TO_LABEL_MAP[tagId];\n      \n      // Não adicionar \"issue\" como label, é só para identificar\n      if (labelName !== 'issue') {\n        githubLabels.push(labelName);\n        console.log(`✅ Tag mapeada: \"${tagId}\" -> \"${labelName}\"`);\n      } else {\n        console.log(`ℹ️ Tag \"issue\" detectada (não vira label): \"${tagId}\"`);\n      }\n    } else {\n      console.log(`⚠️ Tag ID desconhecida (ignorada): \"${tagId}\"`);\n      console.log(`   💡 Crie um sticky note com texto \"${tagId}\" e tag issue + essa tag para mapear`);\n    }\n  });\n  \n  // Remover duplicatas\n  const uniqueLabels = [...new Set(githubLabels)];\n  console.log(`🏷️ Labels finais para GitHub: [${uniqueLabels.join(', ')}]`);\n  \n  let targetRepo = null;\n  let targetArea = null;\n  \n  if (sticky.parentId && AREA_TO_REPO_MAP[sticky.parentId]) {\n    targetRepo = AREA_TO_REPO_MAP[sticky.parentId];\n    targetArea = sticky.parentId;\n    console.log(`✅ Área encontrada por parentId: ${targetArea} -> ${targetRepo}`);\n  } else {\n    const areas = allWidgets.filter(w => w.type === 'area');\n    \n    for (const area of areas) {\n      if (!AREA_TO_REPO_MAP[area.id]) continue;\n      \n      const isInside = sticky.x >= area.x && \n                       sticky.x <= area.x + area.width && \n                       sticky.y >= area.y && \n                       sticky.y <= area.y + area.height;\n      \n      if (isInside) {\n        targetRepo = AREA_TO_REPO_MAP[area.id];\n        targetArea = area.id;\n        console.log(`✅ Área encontrada por posição: ${area.title || area.id} -> ${targetRepo}`);\n        break;\n      }\n    }\n  }\n  \n  if (!targetRepo) {\n    console.log(`⚠️ Sticky note ${sticky.id} não está em nenhuma área mapeada`);\n    continue;\n  }\n  \n  console.log(`\\n🔍 Verificando se está na coluna \"A Fazer\"...`);\n  \n  const aFazerShapes = allWidgets.filter(w => {\n    if (w.type !== 'shape' || !w.htmlText) return false;\n    if (w.parentId !== targetArea) return false;\n    \n    const text = w.htmlText.toLowerCase();\n    return text.includes('a fazer') || text.includes('afazer') || text.includes('todo');\n  });\n  \n  console.log(`📋 Shapes \"A Fazer\" encontradas na área: ${aFazerShapes.length}`);\n  \n  let isInAFazer = false;\n  for (const shape of aFazerShapes) {\n    const shapeLeft = shape.x;\n    const shapeRight = shape.x + shape.width;\n    const shapeTop = shape.y;\n    const shapeBottom = shape.y + shape.height;\n    \n    const stickyInShape = sticky.x >= shapeLeft && \n                          sticky.x <= shapeRight && \n                          sticky.y >= shapeTop && \n                          sticky.y <= shapeBottom;\n    \n    if (stickyInShape) {\n      isInAFazer = true;\n      console.log(`✅ Sticky note está na coluna \"A Fazer\" (Shape ID: ${shape.id})`);\n      break;\n    }\n  }\n  \n  if (!isInAFazer) {\n    console.log(`⚠️ Sticky note ${sticky.id} NÃO está na coluna \"A Fazer\" - ignorando`);\n    continue;\n  }\n  \n  const rawText = sticky.htmlText ? \n    sticky.htmlText.replace(/<[^>]*>/g, '').trim() : \n    (sticky.text || '').trim();\n\n  let title = 'Nova Issue do Mural';\n  let description = 'Issue criada automaticamente a partir de sticky note no Mural.';\n\n  // Tentar diferentes separadores\n  if (rawText.includes(' | ')) {\n    const parts = rawText.split(' | ');\n    title = parts[0].trim();\n    description = parts.slice(1).join(' | ').trim();\n    console.log(`📋 Separador \" | \" detectado`);\n  } else if (rawText.includes(' // ')) {\n    const parts = rawText.split(' // ');\n    title = parts[0].trim();\n    description = parts.slice(1).join(' // ').trim();\n    console.log(`📋 Separador \" // \" detectado`);\n  } else if (rawText.includes('\\n')) {\n    const lines = rawText.split('\\n').filter(line => line.trim());\n    title = lines[0] || title;\n    description = lines.slice(1).join('\\n') || description;\n    console.log(`📋 Quebra de linha detectada`);\n  } else {\n    title = rawText || title;\n    description = 'Issue criada automaticamente a partir de sticky note no Mural.';\n    console.log(`📋 Sem separador - usando tudo como título`);\n  }\n  \n  console.log(`📋 Título: \"${title}\"`);\n  console.log(`📝 Descrição: \"${description.substring(0, 100)}...\"`);\n\n  // Buscar informações da área\n  const areaInfo = allWidgets.find(w => w.id === targetArea && w.type === 'area');\n  const areaName = areaInfo ? (areaInfo.title || areaInfo.id) : targetArea;\n\n  // Buscar quem criou o sticky note\n  const createdBy = sticky.createdBy ? \n    `${sticky.createdBy.firstName || ''} ${sticky.createdBy.lastName || ''}`.trim() || \n    sticky.createdBy.alias || \n    sticky.createdBy.id || \n    'Usuário desconhecido' : \n    'Usuário desconhecido';\n\n  console.log(`👤 Criado por: ${createdBy}`);\n  console.log(`🏢 Área: ${areaName}`);\n  \n  issuesToCreate.push({\n    json: {\n      owner: GITHUB_OWNER,\n      repo: targetRepo,\n      title: title,\n      body: `${description}\\n\\n---\\n📌 **Criado automaticamente do Mural**\\n- Criado por: ${createdBy}\\n- Área: ${areaName}\\n- Coluna: A Fazer\\n- Data: ${new Date().toISOString()}\\n- Labels aplicadas: ${uniqueLabels.join(', ') || 'nenhuma'}`,\n      labels: uniqueLabels,\n      // Labels individuais para configuração manual no n8n\n      label1: uniqueLabels[0] || '',\n      label2: uniqueLabels[1] || '',\n      label3: uniqueLabels[2] || '',\n      label4: uniqueLabels[3] || '',\n      label5: uniqueLabels[4] || '',\n      hasLabels: uniqueLabels.length > 0,\n      labelsCount: uniqueLabels.length,\n      stickyId: sticky.id,\n      targetRepo: targetRepo,\n      targetArea: targetArea,\n      originalText: rawText,\n      createdBy: createdBy,\n      areaName: areaName,\n      appliedLabels: uniqueLabels\n    }\n  });\n}\n\n  console.log(`🎯 Issues para criar: ${issuesToCreate.length}`);\n\nissuesToCreate.forEach((issue, index) => {\n  console.log(`\\n📋 Issue ${index + 1}: \"${issue.json.title}\"`);\n  console.log(`   🏷️ Labels: [${issue.json.labels.join(', ')}]`);\n  console.log(`   🔍 Labels type: ${typeof issue.json.labels}`);\n  console.log(`   🔍 Labels is array: ${Array.isArray(issue.json.labels)}`);\n  console.log(`   🔍 Labels JSON: ${JSON.stringify(issue.json.labels)}`);\n});\n\nreturn issuesToCreate.length > 0 ? issuesToCreate : [{\n  json: {\n    message: \"Nenhuma issue nova para criar\",\n    availableTags: Object.keys(TAG_ID_TO_LABEL_MAP).length,\n    mappedLabels: Object.values(TAG_ID_TO_LABEL_MAP).filter(label => label !== 'issue')\n  }\n}];"},"id":"570a6d95-998b-4a7a-8ff7-67a28e7e1769","name":"ProcessStickyNotes","type":"n8n-nodes-base.code","typeVersion":2,"position":[560,1216]},{"parameters":{"owner":{"__rl":true,"value":"={{ $json.owner }}","mode":"name"},"repository":{"__rl":true,"value":"={{ $json.repo }}","mode":"name"},"title":"={{ $json.title }}","body":"={{ $json.body }}","labels":[{"label":"={{ $json.label1 }}"},{"label":"={{ $json.label2 }}"}],"assignees":[]},"id":"f1195437-5c45-4669-836b-1b561ba8e475","name":"CreateGithubIssue","type":"n8n-nodes-base.github","typeVersion":1.1,"position":[752,1216],"webhookId":"3a432717-c678-4b23-b253-efef1bb21dce","credentials":{"githubApi":{"id":"nOcBgnUFCiOOMhea","name":"Inovesc"}}},{"parameters":{"mode":"runOnceForEachItem","jsCode":"const issueData = $input.item.json;\n\n\nconst stickyData = $items('ProcessStickyNotes')[$itemIndex].json;\n\nconsole.log(`Dados da Issue: Issue #${issueData.number}`);\nconsole.log(`Dados do Sticky: Sticky ID ${stickyData.stickyId}`);\n\nconst updateData = {\n  text: `[GITHUB:CREATED] Issue #${issueData.number}\\n\\n🔗 ${issueData.html_url}\\n\\n--- CONTEÚDO ORIGINAL ---\\n${stickyData.originalText}`\n};\n\nreturn {\n  json: {\n    stickyId: stickyData.stickyId,\n    issueNumber: issueData.number,\n    issueUrl: issueData.html_url,\n    updateData: updateData\n  }\n};\n// const issueData = $('CreateGithubIssue').item.json;\n// const stickyData = $('ProcessStickyNotes').item.json;\n\n// console.log(`✅ Issue #${issueData.number} criada com sucesso no repositório ${stickyData.targetRepo}`);\n// console.log(`🔗 URL: ${issueData.html_url}`);\n// console.log(`🏷️ Labels aplicadas: ${stickyData.appliedLabels ? stickyData.appliedLabels.join(', ') : 'nenhuma'}`);\n// console.log(`📌 Atualizando sticky note: ${stickyData.stickyId}`);\n\n// // Criar texto de labels para exibir no sticky\n// const labelsText = stickyData.appliedLabels && stickyData.appliedLabels.length > 0 \n//   ? `\\n🏷️ Labels: ${stickyData.appliedLabels.join(', ')}`\n//   : '';\n\n// const updateData = {\n//   text: `[GITHUB:CREATED] Issue #${issueData.number}${labelsText}\\n\\n🔗 ${issueData.html_url}\\n\\n--- CONTEÚDO ORIGINAL ---\\n${stickyData.originalText}`\n// };\n\n// return {\n//   json: {\n//     stickyId: stickyData.stickyId,\n//     issueNumber: issueData.number,\n//     issueUrl: issueData.html_url,\n//     appliedLabels: stickyData.appliedLabels,\n//     updateData: updateData\n//   }\n// };"},"id":"e5499971-272c-4fa1-a609-7b4d979b3326","name":"PrepareStickyUpdate","type":"n8n-nodes-base.code","typeVersion":2,"position":[944,1216]},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,1504],"id":"0fc5a641-07b1-4d99-9555-7b774f74b50c","name":"Manual Trigger - Test"},{"parameters":{"jsCode":"const TARGET_AREA_IDS = [\n  '0-1754932920649',\n  '0-1754932890194'\n];\n\n\nconst allWidgets = [];\n\nconst authToken = $input.item.json.access_token;\n\nconst baseUrl = 'https://app.mural.co/api/public/v1/murals/escengenharia0546.1746550624481/widgets';\n\nlet nextToken = null;\nlet firstRun = true;\n\ndo {\n  const url = firstRun ? baseUrl : `${baseUrl}?next=${nextToken}`;\n  \n  console.log(`Buscando dados de: ${url}`);\n\n  const response = await this.helpers.httpRequest({\n    method: 'GET',\n    url: url,\n    headers: {\n      'Authorization': `Bearer ${authToken}`,\n      'Accept': 'application/json'\n    },\n    json: true\n  });\n\n  if (response && response.value) {\n    allWidgets.push(...response.value);\n  }\n\n  nextToken = response.next;\n  firstRun = false;\n  \n  console.log(`Widgets buscados nesta página: ${response.value ? response.value.length : 0}. Total acumulado: ${allWidgets.length}`);\n\n} while (nextToken);\n\n\nconsole.log(`Paginação concluída. Total de ${allWidgets.length} widgets encontrados no mural.`);\n\nconst filteredWidgets = allWidgets.filter(widget => {\n  return widget.parentId && TARGET_AREA_IDS.includes(widget.parentId);\n});\n\nconsole.log(`Encontrados ${filteredWidgets.length} widgets dentro das áreas monitoradas: [${TARGET_AREA_IDS.join(', ')}]`);\n\n\nreturn [{\n  json: {\n    value: filteredWidgets,\n    count: filteredWidgets.length\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[368,1216],"id":"5a3b4d5e-f324-4106-9bce-bfb90c8e3f5d","name":"GetWidgets - Sticky"},{"parameters":{"jsCode":"const TARGET_AREA_IDS = [\n  '0-1754932920649',\n  '0-1754932890194'\n];\n\n\nconst authToken = $input.item.json.access_token;\nconst MURAL_ID = 'escengenharia0546.1746550624481'; \n\nconst allWidgets = [];\n\nconst baseUrl = `https://app.mural.co/api/public/v1/murals/${MURAL_ID}/widgets`;\n\nlet nextToken = null;\nlet firstRun = true;\n\ndo {\n  const url = firstRun ? baseUrl : `${baseUrl}?next=${nextToken}`;\n  console.log(`Buscando dados de: ${url}`);\n  const response = await this.helpers.httpRequest({\n    method: 'GET', url, headers: { 'Authorization': `Bearer ${authToken}`, 'Accept': 'application/json' }, json: true\n  });\n  if (response && response.value) { allWidgets.push(...response.value); }\n  nextToken = response.next;\n  firstRun = false;\n} while (nextToken);\n\nconsole.log(`Paginação concluída. Total de ${allWidgets.length} widgets encontrados no mural.`);\n\n\nconst filteredWidgets = allWidgets.filter(widget => {\n  return widget.parentId && TARGET_AREA_IDS.includes(widget.parentId);\n});\n\nconsole.log(`Encontrados ${filteredWidgets.length} widgets dentro da(s) área(s) monitorada(s).`);\n\n\nreturn [{\n  json: {\n    value: filteredWidgets,\n    count: filteredWidgets.length\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[448,992],"id":"9ee49b28-11fd-40e8-bfa5-89d08e14b28b","name":"GetWidgets1"},{"parameters":{"url":"https://app.mural.co/api/public/v1/murals/escengenharia0546.1746550624481/tags","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $json.access_token }}"},{"name":"Accept","value":"=application/json"},{"name":"Content-Type","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[352,1504],"id":"f02ea089-e4fd-4b84-813d-6ec75c9cf5bc","name":"GetWidgets3","alwaysOutputData":true},{"parameters":{"method":"POST","url":"https://app.mural.co/api/public/v1/authorization/oauth2/token","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/x-www-form-urlencoded"}]},"sendBody":true,"contentType":"form-urlencoded","bodyParameters":{"parameters":[{"name":"client_id","value":"0db8a8b1-65ce-4a1b-aa24-bea700f34160"},{"name":"client_secret","value":"236f0a621e40299f1753d6b67fc7b3e76f436d0352c8177ab4008da81fd0a01ab9b25bb4dcaca7c2b1aa6444ac02fd92426617c5d7b59d8564be3863cc99ed62"},{"name":"refresh_token","value":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRJZCI6IjBkYjhhOGIxLTY1Y2UtNGExYi1hYTI0LWJlYTcwMGYzNDE2MCIsImNvcnNEb21haW5zIjpbIm44bi5lc2MuY29tLmJyIiwib2F1dGgucHN0bW4uaW8iXSwiZCI6ImVzYy5jb20uYnIiLCJtZmFBdXRoZW50aWNhdGVkIjpmYWxzZSwic2NvcGVzIjpbIndvcmtzcGFjZXM6cmVhZCIsIm11cmFsczp3cml0ZSIsIm11cmFsczpyZWFkIl0sInNvdXJjZSI6Im11cmFsbHkiLCJ1c2VybmFtZSI6InU3NGI2NmI4YjNlNjE0YmJhY2U4Nzg5NTIiLCJzZXNzaW9uSWQiOiI4MjAzNDNlNS02YzhjLTQyZmUtYTJjNi01NzkzMWJiMzczMmEiLCJpYXQiOjE3NTM5MDgzNzIsImV4cCI6MTc4NTQ2NTk3Mn0.DXiT_K5AQNzx0YS5CDjmTFGeBolS1WYXMz0g85vWHWk"},{"name":"grant_type","value":"refresh_token"}]},"options":{}},"id":"e9778a66-a70a-4c0a-9983-9aff502c198d","name":"GetAuth - Sticky1","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[160,1504]},{"parameters":{"content":"## GET TAGS","height":224,"width":576},"type":"n8n-nodes-base.stickyNote","position":[-16,1440],"typeVersion":1,"id":"28512d10-9e67-4017-b1c2-c5ca55f8b6a7","name":"Sticky Note4"},{"parameters":{"content":"## Criar Issue","height":256,"width":1552},"type":"n8n-nodes-base.stickyNote","position":[-16,1168],"typeVersion":1,"id":"8cd60cdd-da3a-4463-b297-b20e92ef8fd6","name":"Sticky Note5"},{"parameters":{"options":{"reset":false}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1152,1216],"id":"1985b8b8-ad40-4541-9f18-4c277a778a5c","name":"Loop Over Items1"},{"parameters":{"method":"PATCH","url":"=https://app.mural.co/api/public/v1/murals/escengenharia0546.1746550624481/widgets/sticky-note/{{ $json.stickyId }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $('GetAuth - Sticky').first().json.access_token }}"},{"name":"Accept","value":"application/json"},{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={{ $json.updateData }}","options":{}},"id":"fde8cf0c-cb25-4e42-9cd5-a4b9467f7abd","name":"UpdateStickyNote","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1344,1232]}],"connections":{"MoveSticky":{"main":[[{"node":"GetFreshWidgets","type":"main","index":0}]]},"CreateSticky":{"main":[[{"node":"CreateStickyHTTP","type":"main","index":0}]]},"Switch1":{"main":[[{"node":"CreateSticky","type":"main","index":0}],[{"node":"MoveSticky","type":"main","index":0}],[{"node":"CompletePR","type":"main","index":0}]]},"GetWidgets":{"main":[[{"node":"GetColumns","type":"main","index":0}]]},"GetColumns":{"main":[[{"node":"Switch1","type":"main","index":0}]]},"GetAuth":{"main":[[{"node":"GetWidgets","type":"main","index":0}]]},"ProcessEvent":{"main":[[{"node":"GetAuth","type":"main","index":0}]]},"GetFreshWidgets":{"main":[[{"node":"RefreshAndMove","type":"main","index":0}]]},"RefreshAndMove":{"main":[[{"node":"HTTP Request1","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"GetFreshWidgets2","type":"main","index":0}]]},"CompletePR":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"GetFreshWidgets2":{"main":[[{"node":"RefreshAndMove2","type":"main","index":0}]]},"RefreshAndMove2":{"main":[[{"node":"HTTP Request2","type":"main","index":0}]]},"HTTP Request2":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Schedule Trigger":{"main":[[{"node":"GetAuth1","type":"main","index":0}]]},"ProcessMuralData":{"main":[[{"node":"Get an issue","type":"main","index":0}]]},"Is Issue Open?":{"main":[[{"node":"Edit an issue","type":"main","index":0}]]},"GetAuth1":{"main":[[{"node":"GetWidgets1","type":"main","index":0}]]},"Get an issue":{"main":[[{"node":"Is Issue Open?","type":"main","index":0}]]},"Github Trigger":{"main":[[]]},"Schedule Trigger - Sticky Monitor":{"main":[[{"node":"GetAuth - Sticky","type":"main","index":0}]]},"GetAuth - Sticky":{"main":[[{"node":"GetWidgets - Sticky","type":"main","index":0}]]},"ProcessStickyNotes":{"main":[[{"node":"CreateGithubIssue","type":"main","index":0}]]},"CreateGithubIssue":{"main":[[{"node":"PrepareStickyUpdate","type":"main","index":0}]]},"PrepareStickyUpdate":{"main":[[{"node":"Loop Over Items1","type":"main","index":0}]]},"Manual Trigger - Test":{"main":[[]]},"GetWidgets - Sticky":{"main":[[{"node":"ProcessStickyNotes","type":"main","index":0}]]},"GetWidgets1":{"main":[[{"node":"ProcessMuralData","type":"main","index":0}]]},"GetAuth - Sticky1":{"main":[[{"node":"GetWidgets3","type":"main","index":0}]]},"Loop Over Items1":{"main":[[],[{"node":"UpdateStickyNote","type":"main","index":0}]]},"UpdateStickyNote":{"main":[[{"node":"Loop Over Items1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"America/Sao_Paulo","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveExecutionProgress":true,"saveManualExecutions":true,"callerPolicy":"workflowsFromSameOwner"},"staticData":{"node:Github Trigger":{"webhookId":561136152,"webhookEvents":["issues","pull_request"]},"node:Schedule Trigger":{"recurrenceRules":[]},"node:Schedule Trigger - Sticky Monitor":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{"Schedule Trigger":[{"json":{"timestamp":"2025-07-28T15:58:51.003-04:00","Readable date":"July 28th 2025, 3:58:51 pm","Readable time":"3:58:51 pm","Day of week":"Monday","Year":"2025","Month":"July","Day of month":"28","Hour":"15","Minute":"58","Second":"51","Timezone":"America/New_York (UTC-04:00)"}}]},"versionId":"f7d2b556-668f-4687-931e-75db089e28fa","triggerCount":2,"shared":[{"createdAt":"2025-08-07T14:10:11.028Z","updatedAt":"2025-08-07T14:10:11.028Z","role":"workflow:owner","workflowId":"KVWVWlpZJAE2FvXR","projectId":"jJAHNbybBNBtw3OW"}],"tags":[]}